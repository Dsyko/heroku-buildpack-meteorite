#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# debug
# set -x

# clean up leaking environment
unset GIT_DIR

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

[ ! -d $BUILD_DIR ] && mkdir $BUILD_DIR
[ ! -d $CACHE_DIR ] && mkdir $CACHE_DIR

function error() {
  echo " !     $*"
  exit 1
}

function mktmpdir() {
  dir=$(mktemp -t node-$1-XXXX)
  rm -rf $dir
  mkdir -p $dir
  echo $dir
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function run_npm() {
  command="$1"

  cd "$BUILD_DIR"
  HOME="$BUILD_DIR" $VENDORED_NODE/bin/node $VENDORED_NODE/bin/npm $command 2>&1 | indent

  if [ "${PIPESTATUS[*]}" != "0 0" ]; then
    echo " !     Failed to $command dependencies with npm"
    exit 1
  fi
}

function package_download() {
  engine="$1"
  version="$2"
  location="$3"

  mkdir -p $location
  package="http://s3pository.heroku.com/$engine/v$version/$engine-v$version-linux-x64.tar.gz"
  echo " - downloading and extracting $engine from $package" | indent
  curl $package -s -o - | tar -zxf  - -C $location --strip 1
}

echo "-----> Resolving engine versions"

#TODO: Fix package.json loading
#if [ -f "${BUILD_DIR}/package.json" ]; then
#  requested_node_ver=$(cat $BUILD_DIR/package.json | $LP_DIR/vendor/jq -r .engines.node)
#fi
#temporary - load from nodeversion
requested_node_ver=""
if [ -f "${BUILD_DIR}/nodeversion" ]; then
  echo " - nodeversion file detected, using for semvar" | indent
  requested_node_ver=$(cat $BUILD_DIR/nodeversion)
  echo " - requested version: $requested_node_ver" | indent
fi
# add a warning if no version of node specified
if [ "$requested_node_ver" == "" ]; then
  requested_node_ver="0.10.38"
  echo
  echo "No version of Node.js specified in nodeversion, using '${requested_node_ver}'" | indent
  echo
fi

NODE_VERSION=$(curl --silent --get --data-urlencode "range=${requested_node_ver}" https://semver.io/node/resolve)
echo "Using Node.js version: ${NODE_VERSION}" | indent

# vendor directories
VENDORED_NODE="$(mktmpdir node)"
VENDORED_MODULES="$(mktmpdir modules)"

# download and unpack packages
echo "-----> Fetching Node.js binaries"
package_download "node" "${NODE_VERSION}" "${VENDORED_NODE}"

# setting up paths for building
PATH="$VENDORED_NODE/bin:$VENDORED_MODULES/bin:$PATH"
INCLUDE_PATH="$VENDORED_NODE/include"
export npm_config_prefix="$VENDORED_MODULES"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"

############################################
# install fibers
############################################
echo "-----> Installing fibers with npm"

run_npm "install fibers -g"
echo "Fibers installed" | indent

METEOR_BUILD_DIR="$BUILD_DIR/.meteor/heroku_build"
mkdir -p "$HOME"
############################################
# install meteor + packages
# bundle, and install into app/
############################################
cd $BUILD_DIR
echo "Installing meteor" | indent

# Using different folder to prevent install script form deleting packages file
VENDORED_METEOR="$(mktmpdir meteor)"
curl https://install.meteor.com | HOME="$VENDORED_METEOR" /bin/sh | indent
echo "Meteor installed" | indent

echo "Building meteor bundle" | indent
HOME="$VENDORED_METEOR" "$VENDORED_METEOR"/.meteor/meteor bundle "$CACHE_DIR"/bundle.tar.gz 2>&1 | indent

mkdir -p "$METEOR_BUILD_DIR"/app
tar -zxf "$CACHE_DIR"/bundle.tar.gz --strip-components 1 -C "$METEOR_BUILD_DIR"/app
rm "$CACHE_DIR"/bundle.tar.gz
############################################

############################################
# Prepare ENV vars
############################################
echo "Setting up MONGO_URL in .profile.d"
mkdir -p "$BUILD_DIR"/.profile.d
cat > "$BUILD_DIR"/.profile.d/mongo.sh <<EOF
  #!/bin/sh

  export MONGO_URL=\${MONGO_URL:-\$MONGOHQ_URL};
EOF

# vendor node into the slug
PATH="$METEOR_BUILD_DIR/bin:$PATH"
echo "-----> Vendoring node into slug"
mkdir -p "$METEOR_BUILD_DIR/bin"
cp "$VENDORED_NODE/bin/node" "$METEOR_BUILD_DIR/bin/node"

############################################
# Run npm install before in order to ensure fibers and others npm packages used by meteor are installed
# as stated in meteor docs: http://docs.meteor.com/#deploying
############################################
echo "-----> Move to app directory: /programs/server"
cd "$METEOR_BUILD_DIR"/app/programs/server

echo "-----> Run npm install"
npm install

indent() {
  sed -u 's/^/       /'
}

############################################
# Install ffmpeg
############################################
echo "-----> Install ffmpeg"
BUILD_DIR=$1
VENDOR_DIR="vendor"
DOWNLOAD_URL="https://s3.amazonaws.com/torsh-talent/ffmpeg.tar.gz"

echo "DOWNLOAD_URL = " $DOWNLOAD_URL | indent

cd $BUILD_DIR
mkdir -p $VENDOR_DIR
cd $VENDOR_DIR
curl -L --silent $DOWNLOAD_URL | tar xz

echo "exporting PATH and LIBRARY_PATH" | indent
PROFILE_PATH="$BUILD_DIR/.profile.d/ffmpeg.sh"
mkdir -p $(dirname $PROFILE_PATH)
echo 'export PATH="$PATH:$HOME/vendor/ffmpeg/bin"' >> $PROFILE_PATH
echo 'export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$HOME/vendor/ffmpeg/lib"' >> $PROFILE_PATH



############################################
# Install wkhtmltopdf
############################################
echo "-----> Install wkhtmltopdf"
set -e

BIN_PATH="$1/bin"
TMP_PATH="$1/tmp"
mkdir -p $BIN_PATH $TMP_PATH

WKHTMLTOPDF_URL="http://download.gna.org/wkhtmltopdf/0.12/0.12.2.1/wkhtmltox-0.12.2.1_linux-trusty-amd64.deb"
WKHTMLTOPDF_PKG="$TMP_PATH/wkhtmltopdf.deb"
WKHTMLTOPDF_PATH="$TMP_PATH/wkhtmltopdf"
WKHTMLTOPDF_BINARIES="$WKHTMLTOPDF_PATH/usr/local/bin"

echo "-----> Downloading wkhtmltopdf Debian package"
curl -L $WKHTMLTOPDF_URL -o $WKHTMLTOPDF_PKG

echo "-----> Unpacking Debian package"
dpkg -x $WKHTMLTOPDF_PKG $WKHTMLTOPDF_PATH

echo "-----> Setting permissions"
chmod +x $WKHTMLTOPDF_BINARIES/*

echo "-----> Moving binaries to the right place"
mv $WKHTMLTOPDF_BINARIES/* $BIN_PATH/

echo "-----> Cleaning up"
rm -rf $WKHTMLTOPDF_PKG $WKHTMLTOPDF_PATH
